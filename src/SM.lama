-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c @ [st, cst, s, w], insns) {
    case insns of
      CONST (x) : ins -> 
        eval ([x : st, cst, s, w], ins)
      | 
      READ : ins ->
        case readWorld (w) of [v, nw] -> 
          eval ([v : st, cst, s, nw], ins)
        esac
      | 
      WRITE : ins ->
        case st of v : no -> 
          eval ([no, cst, s, writeWorld (v, w)], ins)
        esac
      |
      BINOP (op) : ins ->
         case st of r : l : t -> 
          eval ([evalOp (op, l, r) : t, cst, s, w], ins)
         esac
      | 
      LD (x) : ins -> 
        eval ([lookup (s, x) : st, cst, s, w], ins)
      |
      ST (x) : ins ->
        case st of v : t -> 
          assign (s, x, v); eval (c, ins)
        esac
      | 
      LABEL (lb) : ins -> 
        eval (c, ins)
      | 
      JMP (lb) : ins -> 
        eval (c, fromLabel (env, lb))
      | 
      CJMP ("nz", lb) : ins ->
        case st of
          0 : no -> eval ([no, cst, s, w], ins)
          | 
          _ : no -> eval ([no, cst, s, w], fromLabel (env, lb))
        esac
      |
      CJMP ("z", lb) : ins ->
        case st of
          0 : no -> eval ([no, cst, s, w], fromLabel (env, lb))
          | 
          _ : no -> eval ([no, cst, s, w], ins)
        esac
      | 
      LDA (x) : ins -> eval ([Ref (x) : st, cst, s, w], ins)
      | 
      STI : ins ->
        case st of v : Ref (x) : t -> 
          assign (s, x, v); eval ([v : t, cst, s, w], ins)
        esac
      | 
      DROP : ins ->
        case st of v : no -> 
          eval ([no, cst, s, w], ins)
        esac
      | 
      GLOBAL (x) : ins -> 
        assign (s, Glb (x), 0); eval (c, ins)
      | 
      CALL (f, n) : ins -> 
        eval ([st, [s, ins] : cst, s, w], fromLabel (env, f))
      | 
      BEGIN (_, a, lb) : ins ->
        case take (st, a) of [nst, as] -> 
          local ns = makeState (a, lb);
          foldl (fun (x, na) { 
            assign (ns, Arg (x), na); x + 1 
          }, 0, as);
          eval ([nst, cst, ns, w], ins) 
        esac
      | 
      END : ins ->
        case cst of
          {} -> c
          | 
          [ns, q] : ncst -> eval ([st, ncst, ns, w], q)
        esac
      | 
      _ -> c
    esac
  }
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  fun compileAs (as, env) {
    case as of 
      {} -> [{}, env]
      | 
      {a} -> compile (a, env)
      | 
      a : ins ->
        case compile (a, env) of [na, ne1] ->
          case compileAs (ins, ne1) of [nas, ne2] -> 
            [{na, nas}, ne2]
          esac
        esac
    esac
  }

  fun compileFs (c, env) {
    fun compileF (c, env, fs) {
      case fs of
        {} ->
          case getFuns (env) of
            [{}, ne] -> c
            | 
            [fs, ne] -> compileF (c, ne, fs)
          esac
        | 
        Fun (l, as, b, st) : o -> 
          case compile (b, addArgs (beginFun (env, st), as)) of [nf, ne] -> 
            compileF ({c, LABEL (l), BEGIN (l, as.size, getLocals (ne)), nf, END}, ne, o)
          esac
      esac
    }

    compileF (c, env, {})
  }

  fun compile (stmt, env) {
      case stmt of
        Const (c) -> 
          [singleton (CONST (c)), env]
        | 
        Var (x) -> 
          [singleton (LD (lookupVar (env, x))), env]
        | 
        Ref (x) -> 
          [singleton (LDA (lookupVar (env, x))), env]
        | 
        Assn (x, e) ->
          case compile (x, env) of [ns1, ne1] ->
            case compile (e, ne1) of [ns2, ne2] -> 
              [{ns1, ns2, STI}, ne2]
            esac
          esac
        | 
        Assn (Ref (x), e) ->
          case compile (e, env) of [ns, ne] -> 
            [{ns, ST (lookupVar (env, x))}, ne]
          esac
        | 
        Read (x) -> 
          [{READ, ST (lookupVar (env, x)), DROP}, env]
        | 
        Write (e) ->
          case compile (e, env) of [ns, ne] -> 
            [{ns, WRITE}, ne]
          esac
        | 
        Binop (op, l, r) ->
          case compile (l, env) of [ns1, ne1] ->
            case compile (r, ne1) of [ns2, ne2] -> 
              [{ns1, ns2, BINOP (op)}, ne2]
            esac
          esac
        | 
        Skip -> 
          [{}, env]
        | 
        Ignore (s) ->
          case compile (s, env) of [ns, ne] -> 
            [{ns, DROP}, ne]
          esac
        | 
        Seq (s1, s2) ->
          case compile (s1, env) of [ns1, ne1] ->
            case compile (s2, ne1) of [ns2, ne2] -> 
              [{ns1, ns2}, ne2]
            esac
          esac
        | 
        If (e, s1, s2) ->
          case genLabels (env, 2) of [ls, l, ne1] ->
            case compile (s1, ne1) of [ns1, ne2] ->
              case compile (s2, ne2) of [ns2, ne3] ->
                case compile (e, ne3) of [ne, ne3] -> 
                  [{ne, CJMP ("z", ls), ns1, JMP (l), LABEL (ls), ns2, LABEL (l)}, ne3]
                esac
              esac
            esac
          esac
        | 
        While (e, s1) ->
          case genLabels (env, 2) of [ls, l, ne1] ->
            case compile (s1, ne1) of [ns1, ne2] ->
              case compile (e, ne2) of [ne, ne2] -> 
                [{JMP (ls), LABEL (l), ns1, LABEL (ls), ne, CJMP ("nz", l)}, ne2]
              esac
            esac 
          esac
        | 
        Repeat (s1, e) ->
          case genLabels (env, 1) of [l, ne1] ->
            case compile (s1, ne1) of [ns, ne2] ->
              case compile (e, ne2) of [ne, ne2] -> 
                [{LABEL (l), ns, ne, CJMP ("z", l)}, ne2]
              esac
            esac 
          esac
        | 
        Call (f, as) ->
          case compileAs (as, env) of [nas, ne] ->
            case lookupFun (ne, f) of Fun (l, n) -> 
              [{nas, CALL (l, n)}, ne]
            esac
          esac
        | 
        Scope (ds, e) -> 
          case foldl (fun ([env, fs, gs], d) {
              case d of
                Local (xs) -> 
                  [addVars (env, xs), fs,
                    if isGlobal (env) then { map (fun (x) { GLOBAL (x) }, xs), gs }
                    else gs
                    fi
                  ]
                | 
                Fun (f, as, b) ->
                  case genFunLabel (env, f) of [l, ne] -> 
                    [addFun (ne, f, l, as.size), [l, as, b] : fs, gs]
                  esac
              esac
            }, 
            [beginScope (env), {}, {}], ds) of [env, fs, gs] ->
              case compile (e, foldl (fun (env, [n, as, b]) { 
                  rememberFun (env, n, as, b) 
                }, env, fs)) of [ne, nenv] -> 
                  [{gs, ne}, endScope (nenv)]
              esac
          esac
      esac
  }

  case compile (expr, initCompEnv ()) of
    [nc, ne] -> deepFlatten (compileFs ({ LABEL ("main"), BEGIN ("main", 0, getLocals (ne)), nc, END }, ne))
  esac
}
