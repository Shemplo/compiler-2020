-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval ([sk, st, w], c, insns) {
	case insns of
		CONST (c) : ins ->
			eval ([c : sk, st, w], ins)
			
		| READ : ins ->
			case readWorld (w) of
				[v, nw] -> 
					eval ([v : sk, st, nw], ins)
			esac
			
		| WRITE : ins ->
			case sk of
				head : t -> 
					local nw = writeWorld (head, w);
					eval ([t, st, nw], ins)
			esac
			
		| ST (x) : ins -> 
			case sk of
				head : t -> 
					eval ([t, st <- [x, head], w], ins)
			esac
			
		| LD (x) : ins -> 
			eval ([st (x) : sk, st, w], ins)
			
		| BINOP (o) : ins -> 
			case sk of
				r : l : t -> 
					local res = evalBinop (o, l, r);
					eval ([res : t, st, w], ins)
			esac
		| {} -> [sk, st, w]
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (x) -> singleton (CONST (x))
    | Var (x) -> singleton (LD (x))
    | Binop (o, l, r) -> 
      {compileExpr (l), compileExpr (r), BINOP (o)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile_ (stmt) {
      case stmt of
        Read (x)       -> {READ, ST (x)}
        | Write (e)    -> {compileExpr (e), WRITE}
        | Assn (x, e)  -> {compileExpr (e), ST (x)}
        | Seq (s1, s2) -> {compile_ (s1), compile_ (s2)}
      esac
  }
  
  deepFlatten (compile_ (stmt))
}
