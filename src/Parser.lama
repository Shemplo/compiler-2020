-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [
    syntax (pos -s[op]), 
    fun (l, loc, r) {
      fun (a) {
        assertValue (a, Binop (op, l (Val), r (Val)), loc)
      }
    }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- Primary expression
local primary = memo $ eta (
  pos |> fun (loc) { 
    decimal @ fun (x) { 
      fun (atr) { 
        assertValue (atr, Const (stringInt (x)), loc) 
      } 
    } 
  }
  |
  lident |> fun(x) { 
    opt (inbr (s ("("), list0 ( exp @ fun(e) { e (Val) } ), s (")"))) @ fun(args) { 
      fun(a) { 
        case args of
          None -> 
            case a of
              Ref  -> Ref (x)
              | 
              Void -> Ignore (Var (x))
              | 
              _    -> Var (x)
            esac
          | 
          Some (args) -> assertValue (a, Call (x, args))
        esac
      } 
    } 
  } 
  |
  pos |> fun (loc) { 
    kSkip @ lift (fun (atr) { 
      assertVoid (atr, Skip, loc) 
    }) 
  }
  |
  pos |> fun (loc) { 
    kRead |> lift (inbr (s ("("), lident, s (")")) @ fun (x) {
      fun (atr) { 
        assertVoid (atr, Read (x), loc) 
      } 
    }) 
  }
  |
  pos |> fun (loc) { 
    kWrite |> lift (inbr (s ("("), exp, s (")")) @ fun (x) { 
      fun (atr) { 
        assertVoid (atr, Write (x (Val)), loc) 
      } 
    }) 
  }
  |
  pos |> fun(loc) { 
    kWhile |> lift (exp |> fun (e) {
      kDo |> lift (scopeExpr |> fun (s) {
        kOd @ lift (fun(a) { 
          assertVoid(a, While (e (Val), s (Void)), loc) 
        })
      })
    }) 
  }
  |
  pos |> fun (loc) { 
    kIf |> lift (exp |> fun (e) {
      kThen |> lift (exp |> fun (sIf) {
        kElse |> lift (exp |> fun (sElse) {
          kFi @ lift (fun (atr) { 
            If (e (Val), sIf (atr), sElse (atr)) 
          })
        }) 
        |
        kFi @ lift (fun (atr) { 
          If (e (Val), sIf (atr), assertVoid (atr, Skip, pos)) 
        }) 
        |
        elif_ @ fun (sElse) {
          fun (atr) { 
            If (e (Val), sIf (atr), sElse (atr)) 
          }
        }
      })
    }) 
  }
  |
  pos |> fun (loc) { 
    kRepeat |> lift (scopeExpr |> fun (s) {
      kUntil |> lift (assnNop @ fun (e) { 
        fun (atr) { 
          assertVoid (atr, distributeScope (s (Void), fun (s) { 
            Repeat (s, e (Val)) 
          }), loc)
        } 
      })
    }) 
  }
  |
  pos |> fun (loc) { 
    kFor |> lift (scopeExpr |> fun (sDec) {
      s(",") |> lift (exp |> fun (sCond) {
        s(",") |> lift (exp |> fun (sPost) {
          kDo |> lift (scopeExpr |> fun (sBody) {
            kOd @ lift (fun (atr) {
              --assertVoid (atr, Seq (sDec (Void), While (sCond (Val), Seq (sBody (Void), sPost (Void)))), loc)
              assertVoid (atr, distributeScope (
                sDec (Void), fun (sDec) {
                  Seq (sDec, While (sCond (Val), Seq (sBody (Void), sPost (Void))))
                }
              ), loc)
            })
          })
        })
      })
    }) 
  }  
  |
  inbr (s ("("), exp, s (")")) 
  |
  inbr (s ("{"), scopeExpr, s ("}"))
);

local scopeExpr  = memo $ eta ( 
  rep0 (definition) |> fun(defs) {
    opt (exp) @ fun(e) {
      fun(atr) { fun(e) {
        case defs of
          {} -> e
          | 
          _ -> expandScope (defs, e) 
        esac 
      } ( 
        case e of
          Some (e) -> e (atr)
          | 
          _ -> Skip
        esac
      )}
    }
  }
);

local definition = memo $ eta ( 
  kLocal |> lift (list (
    lident |> fun(x) { 
      opt (s ("=") |> lift (
        assnNop @ fun(e) {e (Val)}
      )) @ fun(val) {
        [x, val] 
      } 
    }
  ) |> fun (defs) { 
    s(";") @ lift (Local (defs)) 
  }) 
  |
  kFun |> lift ( lident |> fun(f) {
    inbr (s ("("), list0 ( lident ) , s (")")) |> fun(args) {
        inbr (s ("{"), scopeExpr , s ("}")) @ fun(e) { 
          Fun (f, args, e (Weak)) 
        }
    }
  }) 
);

local elif_ = memo $ eta (
  pos |> fun (loc) { 
    kElif |> lift (exp |> fun (e) {
      kThen |> lift (exp |> fun (sIf) {
        kElse |> lift (exp |> fun (sElse) {
          kFi @ lift (fun (atr) {
            If (e (Val), sIf (atr), sElse (atr)) 
          })
        }) 
        |
        kFi @ lift (fun (atr) { 
          If (e (Val), sIf (atr), assertVoid (atr, Skip, pos)) 
        }) 
        |
        elif_ @ fun (sElse) {fun (atr) { 
          If (e (Val), sIf (atr), sElse (atr)) 
        }}
      })
    }) 
  }
);

local assnNop = memo $ eta (
  expr ({
    [ Right, singleton ([
      s (":="),
      fun (l, loc, r) {
        fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
      }
    ]) ],
    [ Left, map (binop, singleton ( "!!")) ],
    [ Left, map (binop, singleton ( "&&")) ],
    [ Nona, map (binop, { "==", "!=", "<", ">", "<=", ">=" } )],
    [ Left, map (binop, { "+", "-" }) ],
    [ Left, map (binop, { "*", "/", "%" }) ]
  },
  primary
) (id));

local exp = memo $ eta syntax (
  assnNop | s1 = assnNop s [";"] s2 = exp {
    fun (atr) {
      Seq (s1 (Void), s2 (atr))
    }
  }
);

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
