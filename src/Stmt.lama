-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)

--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval ([s, w], stmt) {
	case stmt of
		Read (x) -> 
			case readWorld (w) of [v, nw] ->
        [s <- [x, v], nw]
			esac
			
		| Write (e) -> 
			local expr = evalExpr (s, e);
			[s, writeWorld (expr, w)]
			
		| Assn (x, e) -> 
			local expr = evalExpr (s, e);
			[s <- [x, expr], w]
			
		| Seq (s1, s2) -> 
			eval (eval ([s, w], s1), s2)

    | While (e, body) -> 
      case evalExpr (s, e) of
        0 -> [s, w]
        | _ -> eval ([s, w], Seq (body, stmt))
      esac

    | If (e, sIf, sElse) ->
      case evalExpr (s, e) of
        0 -> eval ([s, w], sElse)
        | _ -> eval ([s, w], sIf)
      esac

    | Repeat (body, e) ->
      case eval ([s, w], body) of [ns, nw] ->
        case evalExpr (ns, e) of
          0 -> eval ([ns, nw], stmt)
          | _ -> [ns, nw]
        esac
      esac
			
		| Skip -> [s, w]
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
