-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c @ [s, w], expr) {
  case expr of
    Const (x) -> [c, x]
    | 
    Var (x) -> 
      checkVar (s, x); 
      [c, case lookup (s, x) of Var (v) -> v esac]
    | 
    Ref (x) -> 
      checkVar (s, x); 
      [c, Ref (x)]
    | 
    Binop (operation, l, r) ->  
      case evalList (c, {l, r}) of [c1, {lRes, rRes}] -> 
        [c1, evalOp (operation, lRes, rRes)]
      esac
    | 
    Read (x) -> 
			case readWorld (w) of [v, nw] ->
        [[s <- [x, Var (v)], nw], BOTTOM]
			esac	
		| 
    Write (e) -> 
      case eval (c, e) of [[ns, nw], v] ->
        [[ns, writeWorld (v, nw)], BOTTOM]
      esac
    | 
    Assn (x, e) -> 
			case evalList (c, {x, e}) of [[ns, nw], {Ref (xVal), eVal}] -> 
        [[ns <- [xVal, Var (eVal)], nw], eVal]
      esac
			
		| 
    Seq (s1, s2) -> 
      case eval (c, s1) of [c1, _] ->
        eval (c1, s2)
      esac
    |
    While (e, body) -> 
      case eval (c, e) of
        [c1, 0] -> [c1, BOTTOM]
        | 
        [c1, _] -> eval (c1, Seq (body, expr))
      esac
    | 
    If (e, sIf, sElse) ->
      case eval (c, e) of
        [c1, 0] -> eval (c1, sElse)
        | 
        [c1, _] -> eval (c1, sIf)
      esac
    | 
    Repeat (body, e) ->
      case eval ([s, w], body) of [c1, _] ->
        case eval (c1, e) of
          [c2, 0] -> eval (c2, expr)
          | 
          [c2, _] -> [c2, BOTTOM]
        esac
      esac
    | 
    Ignore (e) -> 
      case eval (c, e) of [c1, _] -> 
        [c1, BOTTOM]
      esac
    | 
    Skip -> 
      [c, BOTTOM]
    |
    Scope (defs, e) -> 
      case eval ([evalScope (enterScope (s), defs), w], e) of [[ns, nw], v] -> 
        [[leaveScope (ns), nw], v]
      esac
    | 
    Call (f, args) -> 
      checkFun (s, f);
      case lookup (s, f) of
        Fun (as, e) ->
          case evalList (c, args) of [[ns1, nw1], v1] -> 
            case eval ([addKeyValues (enterFunction (ns1), as, v1), nw1], e) of [[ns2, nw2], v2] -> 
              [[leaveFunction (ns1, getGlobal (ns2)), nw2], v2]
            esac
          esac                
      esac
  esac
}

fun evalScope (scope, defs) {
  foldl (fun (scope, def) {
    case def of
      Local (xs) -> addNames (scope, xs)
      | 
      Fun (f, args, e) -> addFunction (scope, f, args, e)  
    esac
  }, scope, defs)
}

fun addKeyValues (state, keys, vals) {
  foldl (fun (s, [name, val]) {
    s.addName (name, Var (val))
  }, state, zip (keys, vals))
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read", Fun ({}, External)).addName ("write", Fun (singleton ("a"), External)) , createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
